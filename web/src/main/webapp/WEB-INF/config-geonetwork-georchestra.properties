# this is the default georchestra properties files, but everything in here
# should be overriden by the one from the georchestra datadir.

# GeoNetwork datadir location:
geonetwork.dir=/tmp/gn_data
# Note that it can/should be overriden at runtime with -Dgeonetwork.dir=/path/to/...

# GeoNetwork datadir subdirectories are embedded by default,
# but they can be eventually relocated elsewhere, eg to use geonetwork-provided
# schemas:
# geonetwork.schema.dir=/var/lib/jetty/webapps/geonetwork/WEB-INF/data/config/schema_plugins/
geonetwork.config.dir=${geonetwork.dir}/config/
geonetwork.schema.dir=${geonetwork.config.dir}/schema_plugins/
geonetwork.lucene.dir=${geonetwork.dir}/index/
geonetwork.thesauri.dir=${geonetwork.config.dir}/codelist/
geonetwork.data.dir=${geonetwork.dir}/data/metadata_data/
geonetwork.svn.dir=${geonetwork.dir}/data/metadata_subversion/
geonetwork.resources.dir=${geonetwork.dir}/data/resources/
geonetwork.upload.dir=${geonetwork.dir}/data/upload/
geonetwork.formatter.dir=${geonetwork.dir}/data/formatter/
geonetwork.htmlcache.dir=${geonetwork.resources.dir}/htmlcache/
geonetwork.indexConfig.dir=${geonetwork.config.dir}/index/

# database configuration
jdbc.host=localhost
jdbc.port=5432
jdbc.database=georchestra
jdbc.schema=geonetwork
jdbc.username=georchestra
jdbc.password=georchestra

# The maximum number of active connections that can be allocated from this pool
# at the same time, or negative for no limit
jdbc.basic.maxActive=50
# The minimum number of active connections that can remain idle in the pool,
# without extra ones being created, or 0 to create none
jdbc.basic.minIdle=1
# The maximum number of connections that can remain idle in the pool, without
# extra ones being released, or negative for no limit
jdbc.basic.maxIdle=10
# The maximum number of open statements that can be allocated from the statement
# pool at the same time, or non-positive for no limit
jdbc.basic.maxOpenPreparedStatements=100
# The maximum number of milliseconds that the pool will wait (when there are no
# available connections) for a connection to be returned before throwing an
# exception, or <= 0 to wait indefinitely
jdbc.basic.maxWait=200
# The indication of whether objects will be validated before being borrowed from
# the pool:
jdbc.basic.testOnBorrow=true
# The SQL query that will be used to validate connections from this pool before
# returning them to the caller
jdbc.basic.validationQuery=SELECT 1

# From config-db/jdbc.properties
jdbc.basic.removeAbandoned=true
jdbc.basic.removeAbandonedTimeout=300
jdbc.basic.timeBetweenEvictionRunsMillis=1000
jdbc.basic.minEvictableIdleTimeMillis=1800000
jdbc.basic.testWhileIdle=true
jdbc.basic.numTestsPerEvictionRun=5
jdbc.basic.poolPreparedStatements=true
jdbc.basic.defaultReadOnly=false
jdbc.basic.defaultAutoCommit=false
jdbc.connectionProperties=
jdbc.basic.logAbandoned=true
jdbc.basic.initialSize=10


# LDAP configuration
ldap.url=ldap://localhost:389
ldap.base.dn=dc=georchestra,dc=org
ldap.security.principal=cn=admin,dc=georchestra,dc=org
ldap.security.credentials=secret

# Users are found in the following OU:
ldap.users.search.base=ou=users
# geOrchestra synchronises LDAP orgs as GN groups:
ldap.groups.search.base=ou=orgs
# geOrchestra roles are found in the following OU:
ldap.roles.search.base=ou=roles

# LDAP synchronization job runs every minute:
ldap.sync.cron=0 * * * * ?

# Schematron validation job, which scans non-harvested metadatas regularly,
# then updates the validation table in the database, runs every 2 hours:
schematron.job.activated=true
schematron.job.cronExpression=0 0 0/2 * * ?
